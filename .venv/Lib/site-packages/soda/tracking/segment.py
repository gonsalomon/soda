from __future__ import annotations

import datetime
import os
from typing import Any

from segment import analytics


class EventTracker:
    """Handles Event Tracking. Now done via segment."""

    def __init__(
        self,
        soda_api_key_id: str,
        invocation_id: str,
        adaptor_type: str,
        organization: dict,
        user: dict,
        cloud_environment: str,
    ):
        self.api_write_key = "8Rr6Dy40zqKe7WX3NdhiNpAxUWrduMcO"
        self.soda_api_key_id = soda_api_key_id
        self.invocation_id = invocation_id
        self.adaptor_type = adaptor_type
        self.push_event = True if os.getenv("PUSH_TRACKING", "t") == "t" else False
        self.env = os.getenv("ENV", "prod")
        self.organization = organization
        self.user = user
        self.cloud_environment = cloud_environment

        analytics.write_key = self.api_write_key

        self.context: dict[str, Any] = self.build_context()

    def build_context(self) -> dict[str, Any]:
        return {
            "invocationId": self.invocation_id,
            "sodaApiKeyId": self.soda_api_key_id,
            "datasourceType": self.adaptor_type,
            "groupId": self.organization.get("id"),
            "traits": {
                "firstName": self.user.get("firstName"),
                "lastName": self.user.get("lastName"),
                "environment": self.cloud_environment,
                "organization": self.organization.get("name"),
                "license": self.organization.get("licensing", {}).get("plan"),
                "jobTitle": self.user.get("jobTitle"),
                "email": self.user.get("email"),
                "company": {
                    "name": self.organization.get("name"),
                },
                "id": self.user.get("id"),
                "username": self.user.get("email"),
                "groupId": self.organization.get("id"),
                "userId": self.user.get("email"),
            },
        }

    def send_check_tracking_event(
        self,
        check_type: str,
    ):
        if self.push_event:
            properties = {
                "checkType": check_type,
            }

            analytics.track(
                self.user.get("email"),
                # TODO: document the need to set env != prod when testing to allow triage of events
                # I think soda-core has some practices on this for OT we should check with them on how to
                # make it somewhat foolproof (if at all possible)
                "Check Evaluation",
                properties=properties,
                context=self.context,
                timestamp=datetime.datetime.now(),
            )
            # NOTE: Not calling analytics.flush() since the tracker is async, it gets flushed at the end of the scan.

    def flush(self):
        analytics.flush()
