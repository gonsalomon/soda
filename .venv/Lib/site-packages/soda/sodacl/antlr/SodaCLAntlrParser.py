# Generated from /Users/m1n0/dev/soda/soda-sql/soda-library/src/soda/soda/sodacl/antlr/SodaCLAntlr.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,64,475,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,
        0,1,0,1,0,1,0,3,0,111,8,0,1,1,1,1,1,1,3,1,116,8,1,1,2,1,2,1,2,3,
        2,121,8,2,1,2,1,2,1,3,1,3,1,3,3,3,128,8,3,1,3,1,3,1,4,1,4,1,4,3,
        4,135,8,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,143,8,5,1,5,1,5,1,5,1,5,3,
        5,149,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,3,10,172,8,10,1,10,1,10,1,10,
        1,10,3,10,178,8,10,1,10,1,10,1,11,1,11,3,11,184,8,11,1,11,1,11,1,
        11,1,11,3,11,190,8,11,3,11,192,8,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,3,13,205,8,13,1,13,3,13,208,8,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,220,8,14,1,15,1,
        15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,3,19,233,8,19,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,5,21,242,8,21,10,21,12,21,245,9,
        21,1,21,1,21,1,22,1,22,3,22,251,8,22,1,23,1,23,3,23,255,8,23,1,24,
        1,24,3,24,259,8,24,1,25,1,25,3,25,263,8,25,1,25,1,25,1,25,3,25,268,
        8,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,276,8,25,1,26,1,26,1,26,
        1,26,3,26,282,8,26,1,26,1,26,1,26,3,26,287,8,26,1,26,1,26,1,26,1,
        26,1,26,1,26,3,26,295,8,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,4,29,316,
        8,29,11,29,12,29,317,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
        1,33,3,33,330,8,33,1,33,3,33,333,8,33,1,33,1,33,3,33,337,8,33,1,
        34,1,34,1,35,4,35,342,8,35,11,35,12,35,343,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,
        36,363,8,36,10,36,12,36,366,9,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,5,36,379,8,36,10,36,12,36,382,9,36,1,36,1,
        36,3,36,386,8,36,1,37,1,37,1,37,1,37,3,37,392,8,37,1,37,1,37,1,38,
        1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,406,8,40,1,41,
        1,41,1,41,1,41,1,41,3,41,413,8,41,1,41,1,41,1,42,1,42,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,441,8,45,1,46,1,46,1,46,
        1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,3,48,454,8,48,1,48,1,48,
        1,49,1,49,1,49,1,49,3,49,462,8,49,1,49,3,49,465,8,49,1,49,1,49,3,
        49,469,8,49,1,50,1,50,1,51,1,51,1,51,0,0,52,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        0,8,1,0,34,36,2,0,37,37,41,41,2,0,38,38,42,42,1,0,29,31,2,0,49,49,
        52,52,1,0,47,53,1,0,45,46,2,0,34,36,54,57,476,0,110,1,0,0,0,2,115,
        1,0,0,0,4,117,1,0,0,0,6,124,1,0,0,0,8,131,1,0,0,0,10,138,1,0,0,0,
        12,152,1,0,0,0,14,157,1,0,0,0,16,160,1,0,0,0,18,163,1,0,0,0,20,166,
        1,0,0,0,22,183,1,0,0,0,24,195,1,0,0,0,26,199,1,0,0,0,28,219,1,0,
        0,0,30,221,1,0,0,0,32,223,1,0,0,0,34,225,1,0,0,0,36,228,1,0,0,0,
        38,230,1,0,0,0,40,234,1,0,0,0,42,236,1,0,0,0,44,250,1,0,0,0,46,254,
        1,0,0,0,48,258,1,0,0,0,50,262,1,0,0,0,52,277,1,0,0,0,54,296,1,0,
        0,0,56,300,1,0,0,0,58,315,1,0,0,0,60,321,1,0,0,0,62,323,1,0,0,0,
        64,325,1,0,0,0,66,336,1,0,0,0,68,338,1,0,0,0,70,341,1,0,0,0,72,385,
        1,0,0,0,74,387,1,0,0,0,76,395,1,0,0,0,78,397,1,0,0,0,80,405,1,0,
        0,0,82,407,1,0,0,0,84,416,1,0,0,0,86,418,1,0,0,0,88,425,1,0,0,0,
        90,440,1,0,0,0,92,442,1,0,0,0,94,447,1,0,0,0,96,453,1,0,0,0,98,468,
        1,0,0,0,100,470,1,0,0,0,102,472,1,0,0,0,104,111,3,16,8,0,105,111,
        3,20,10,0,106,111,3,22,11,0,107,111,3,72,36,0,108,111,3,10,5,0,109,
        111,3,18,9,0,110,104,1,0,0,0,110,105,1,0,0,0,110,106,1,0,0,0,110,
        107,1,0,0,0,110,108,1,0,0,0,110,109,1,0,0,0,111,1,1,0,0,0,112,116,
        3,6,3,0,113,116,3,4,2,0,114,116,3,8,4,0,115,112,1,0,0,0,115,113,
        1,0,0,0,115,114,1,0,0,0,116,3,1,0,0,0,117,120,5,1,0,0,118,119,5,
        64,0,0,119,121,3,46,23,0,120,118,1,0,0,0,120,121,1,0,0,0,121,122,
        1,0,0,0,122,123,5,0,0,1,123,5,1,0,0,0,124,127,3,38,19,0,125,126,
        5,64,0,0,126,128,3,48,24,0,127,125,1,0,0,0,127,128,1,0,0,0,128,129,
        1,0,0,0,129,130,5,0,0,1,130,7,1,0,0,0,131,134,5,2,0,0,132,133,5,
        64,0,0,133,135,3,46,23,0,134,132,1,0,0,0,134,135,1,0,0,0,135,136,
        1,0,0,0,136,137,5,0,0,1,137,9,1,0,0,0,138,139,5,3,0,0,139,140,5,
        64,0,0,140,142,3,102,51,0,141,143,3,12,6,0,142,141,1,0,0,0,142,143,
        1,0,0,0,143,148,1,0,0,0,144,145,5,64,0,0,145,146,5,52,0,0,146,147,
        5,64,0,0,147,149,3,70,35,0,148,144,1,0,0,0,148,149,1,0,0,0,149,150,
        1,0,0,0,150,151,5,0,0,1,151,11,1,0,0,0,152,153,5,64,0,0,153,154,
        5,4,0,0,154,155,5,64,0,0,155,156,3,102,51,0,156,13,1,0,0,0,157,158,
        5,64,0,0,158,159,5,29,0,0,159,15,1,0,0,0,160,161,5,5,0,0,161,162,
        5,0,0,1,162,17,1,0,0,0,163,164,5,6,0,0,164,165,5,0,0,1,165,19,1,
        0,0,0,166,167,5,7,0,0,167,168,5,64,0,0,168,171,3,102,51,0,169,170,
        5,64,0,0,170,172,3,84,42,0,171,169,1,0,0,0,171,172,1,0,0,0,172,177,
        1,0,0,0,173,174,5,64,0,0,174,175,5,28,0,0,175,176,5,64,0,0,176,178,
        3,102,51,0,177,173,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,
        5,0,0,1,180,21,1,0,0,0,181,184,3,26,13,0,182,184,3,36,18,0,183,181,
        1,0,0,0,183,182,1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,191,
        3,38,19,0,186,189,5,64,0,0,187,190,3,46,23,0,188,190,3,24,12,0,189,
        187,1,0,0,0,189,188,1,0,0,0,190,192,1,0,0,0,191,186,1,0,0,0,191,
        192,1,0,0,0,192,193,1,0,0,0,193,194,5,0,0,1,194,23,1,0,0,0,195,196,
        5,52,0,0,196,197,5,64,0,0,197,198,5,8,0,0,198,25,1,0,0,0,199,200,
        5,32,0,0,200,204,5,64,0,0,201,202,3,28,14,0,202,203,5,64,0,0,203,
        205,1,0,0,0,204,201,1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,
        208,3,34,17,0,207,206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,
        210,5,24,0,0,210,211,5,64,0,0,211,27,1,0,0,0,212,213,3,30,15,0,213,
        214,5,64,0,0,214,215,5,33,0,0,215,216,5,64,0,0,216,217,3,100,50,
        0,217,220,1,0,0,0,218,220,3,32,16,0,219,212,1,0,0,0,219,218,1,0,
        0,0,220,29,1,0,0,0,221,222,7,0,0,0,222,31,1,0,0,0,223,224,5,9,0,
        0,224,33,1,0,0,0,225,226,5,10,0,0,226,227,5,64,0,0,227,35,1,0,0,
        0,228,229,5,11,0,0,229,37,1,0,0,0,230,232,3,40,20,0,231,233,3,42,
        21,0,232,231,1,0,0,0,232,233,1,0,0,0,233,39,1,0,0,0,234,235,3,102,
        51,0,235,41,1,0,0,0,236,237,5,41,0,0,237,243,3,44,22,0,238,239,5,
        43,0,0,239,240,5,64,0,0,240,242,3,44,22,0,241,238,1,0,0,0,242,245,
        1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,243,
        1,0,0,0,246,247,5,42,0,0,247,43,1,0,0,0,248,251,3,96,48,0,249,251,
        3,102,51,0,250,248,1,0,0,0,250,249,1,0,0,0,251,45,1,0,0,0,252,255,
        3,54,27,0,253,255,3,50,25,0,254,252,1,0,0,0,254,253,1,0,0,0,255,
        47,1,0,0,0,256,259,3,56,28,0,257,259,3,52,26,0,258,256,1,0,0,0,258,
        257,1,0,0,0,259,49,1,0,0,0,260,261,5,27,0,0,261,263,5,64,0,0,262,
        260,1,0,0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,265,5,26,0,0,265,
        267,5,64,0,0,266,268,7,1,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,
        269,1,0,0,0,269,270,3,66,33,0,270,271,5,64,0,0,271,272,5,25,0,0,
        272,273,5,64,0,0,273,275,3,66,33,0,274,276,7,2,0,0,275,274,1,0,0,
        0,275,276,1,0,0,0,276,51,1,0,0,0,277,278,3,68,34,0,278,281,5,64,
        0,0,279,280,5,27,0,0,280,282,5,64,0,0,281,279,1,0,0,0,281,282,1,
        0,0,0,282,283,1,0,0,0,283,284,5,26,0,0,284,286,5,64,0,0,285,287,
        7,1,0,0,286,285,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,289,
        3,66,33,0,289,290,5,64,0,0,290,291,5,25,0,0,291,292,5,64,0,0,292,
        294,3,66,33,0,293,295,7,2,0,0,294,293,1,0,0,0,294,295,1,0,0,0,295,
        53,1,0,0,0,296,297,3,64,32,0,297,298,5,64,0,0,298,299,3,66,33,0,
        299,55,1,0,0,0,300,301,3,68,34,0,301,302,5,64,0,0,302,303,3,64,32,
        0,303,304,5,64,0,0,304,305,3,66,33,0,305,57,1,0,0,0,306,307,3,60,
        30,0,307,308,5,64,0,0,308,309,3,62,31,0,309,310,5,64,0,0,310,311,
        3,66,33,0,311,312,5,64,0,0,312,313,3,62,31,0,313,314,5,64,0,0,314,
        316,1,0,0,0,315,306,1,0,0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,
        318,1,0,0,0,318,319,1,0,0,0,319,320,3,60,30,0,320,59,1,0,0,0,321,
        322,7,3,0,0,322,61,1,0,0,0,323,324,7,4,0,0,324,63,1,0,0,0,325,326,
        7,5,0,0,326,65,1,0,0,0,327,332,3,96,48,0,328,330,5,64,0,0,329,328,
        1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,333,5,44,0,0,332,329,
        1,0,0,0,332,333,1,0,0,0,333,337,1,0,0,0,334,337,3,70,35,0,335,337,
        5,56,0,0,336,327,1,0,0,0,336,334,1,0,0,0,336,335,1,0,0,0,337,67,
        1,0,0,0,338,339,5,12,0,0,339,69,1,0,0,0,340,342,5,60,0,0,341,340,
        1,0,0,0,342,343,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,71,1,
        0,0,0,345,346,5,13,0,0,346,347,5,64,0,0,347,348,3,76,38,0,348,349,
        5,64,0,0,349,350,3,74,37,0,350,351,5,64,0,0,351,352,3,102,51,0,352,
        353,5,64,0,0,353,354,3,78,39,0,354,386,1,0,0,0,355,356,5,13,0,0,
        356,357,5,64,0,0,357,358,5,41,0,0,358,364,3,76,38,0,359,360,5,43,
        0,0,360,361,5,64,0,0,361,363,3,76,38,0,362,359,1,0,0,0,363,366,1,
        0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,364,1,
        0,0,0,367,368,5,42,0,0,368,369,5,64,0,0,369,370,3,74,37,0,370,371,
        5,64,0,0,371,372,3,102,51,0,372,373,5,64,0,0,373,374,5,41,0,0,374,
        380,3,78,39,0,375,376,5,43,0,0,376,377,5,64,0,0,377,379,3,78,39,
        0,378,375,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,
        0,381,383,1,0,0,0,382,380,1,0,0,0,383,384,5,42,0,0,384,386,1,0,0,
        0,385,345,1,0,0,0,385,355,1,0,0,0,386,73,1,0,0,0,387,388,5,14,0,
        0,388,391,5,64,0,0,389,390,5,27,0,0,390,392,5,64,0,0,391,389,1,0,
        0,0,391,392,1,0,0,0,392,393,1,0,0,0,393,394,5,15,0,0,394,75,1,0,
        0,0,395,396,3,102,51,0,396,77,1,0,0,0,397,398,3,102,51,0,398,79,
        1,0,0,0,399,406,3,82,41,0,400,406,3,88,44,0,401,406,3,86,43,0,402,
        406,3,90,45,0,403,406,3,92,46,0,404,406,3,94,47,0,405,399,1,0,0,
        0,405,400,1,0,0,0,405,401,1,0,0,0,405,402,1,0,0,0,405,403,1,0,0,
        0,405,404,1,0,0,0,406,81,1,0,0,0,407,408,5,16,0,0,408,409,5,64,0,
        0,409,412,3,102,51,0,410,411,5,64,0,0,411,413,3,84,42,0,412,410,
        1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,415,5,0,0,1,415,83,1,
        0,0,0,416,417,3,102,51,0,417,85,1,0,0,0,418,419,5,17,0,0,419,420,
        5,64,0,0,420,421,3,102,51,0,421,422,5,64,0,0,422,423,3,84,42,0,423,
        424,5,0,0,1,424,87,1,0,0,0,425,426,5,18,0,0,426,427,5,64,0,0,427,
        428,3,102,51,0,428,429,5,0,0,1,429,89,1,0,0,0,430,431,5,19,0,0,431,
        432,5,64,0,0,432,433,3,102,51,0,433,434,5,0,0,1,434,441,1,0,0,0,
        435,436,5,20,0,0,436,437,5,64,0,0,437,438,3,102,51,0,438,439,5,0,
        0,1,439,441,1,0,0,0,440,430,1,0,0,0,440,435,1,0,0,0,441,91,1,0,0,
        0,442,443,5,21,0,0,443,444,5,64,0,0,444,445,3,102,51,0,445,446,5,
        0,0,1,446,93,1,0,0,0,447,448,5,22,0,0,448,449,5,64,0,0,449,450,3,
        102,51,0,450,451,5,0,0,1,451,95,1,0,0,0,452,454,7,6,0,0,453,452,
        1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,456,3,98,49,0,456,97,
        1,0,0,0,457,469,3,100,50,0,458,459,5,59,0,0,459,461,5,23,0,0,460,
        462,5,59,0,0,461,460,1,0,0,0,461,462,1,0,0,0,462,469,1,0,0,0,463,
        465,5,59,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,
        467,5,23,0,0,467,469,5,59,0,0,468,457,1,0,0,0,468,458,1,0,0,0,468,
        464,1,0,0,0,469,99,1,0,0,0,470,471,5,59,0,0,471,101,1,0,0,0,472,
        473,7,7,0,0,473,103,1,0,0,0,42,110,115,120,127,134,142,148,171,177,
        183,189,191,204,207,219,232,243,250,254,258,262,267,275,281,286,
        294,317,329,332,336,343,364,380,385,391,405,412,440,453,461,464,
        468
    ]

class SodaCLAntlrParser ( Parser ):

    grammarFileName = "SodaCLAntlr.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'rows diff'", "'schema'", "'freshness using'", 
                     "'with'", "'failed rows'", "'group by'", "'row_count same as'", 
                     "'default'", "'same day last week'", "'percent'", "'anomaly score for '", 
                     "'diff'", "'values in'", "'must'", "'exist in'", "'checks for'", 
                     "'filter'", "'configurations for'", "'for each dataset'", 
                     "'for each table'", "'for each column'", "'reconciliation'", 
                     "'.'", "'for'", "'and'", "'between'", "'not'", "'in'", 
                     "'warn'", "'fail'", "'pass'", "'change'", "'last'", 
                     "'avg'", "'min'", "'max'", "'['", "']'", "'{'", "'}'", 
                     "'('", "')'", "','", "'%'", "'+'", "'-'", "'!='", "'<>'", 
                     "'<='", "'>='", "'='", "'<'", "'>'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'d'", "'h'", "'m'", "' '" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "FOR", "AND", "BETWEEN", "NOT", "IN", "WARN", "FAIL", 
                      "PASS", "CHANGE", "LAST", "AVG", "MIN", "MAX", "SQUARE_LEFT", 
                      "SQUARE_RIGHT", "CURLY_LEFT", "CURLY_RIGHT", "ROUND_LEFT", 
                      "ROUND_RIGHT", "COMMA", "PERCENT", "PLUS", "MINUS", 
                      "NOT_EQUAL", "NOT_EQUAL_SQL", "LTE", "GTE", "EQUAL", 
                      "LT", "GT", "IDENTIFIER_DOUBLE_QUOTE", "IDENTIFIER_BACKTICK", 
                      "IDENTIFIER_UNQUOTED", "IDENTIFIER_SQUARE_BRACKETS", 
                      "STRING", "DIGITS", "TIMEUNIT", "DAY", "HOUR", "MINUTE", 
                      "S" ]

    RULE_check = 0
    RULE_reconciliation_check = 1
    RULE_reconciliation_row_diff_check = 2
    RULE_reconciliation_metric_check = 3
    RULE_reconciliation_schema_check = 4
    RULE_freshness_check = 5
    RULE_freshness_variable = 6
    RULE_warn_qualifier = 7
    RULE_failed_rows_check = 8
    RULE_group_by_check = 9
    RULE_row_count_comparison_check = 10
    RULE_metric_check = 11
    RULE_default_anomaly_threshold = 12
    RULE_change_over_time = 13
    RULE_change_over_time_config = 14
    RULE_change_aggregation = 15
    RULE_same_day_last_week = 16
    RULE_percent = 17
    RULE_anomaly_score = 18
    RULE_metric = 19
    RULE_metric_name = 20
    RULE_metric_args = 21
    RULE_metric_arg = 22
    RULE_threshold = 23
    RULE_reconciliation_threshold = 24
    RULE_between_threshold = 25
    RULE_reconciliation_between_threshold = 26
    RULE_comparator_threshold = 27
    RULE_reconciliation_comparator_threshold = 28
    RULE_zones_threshold = 29
    RULE_outcome = 30
    RULE_zone_comparator = 31
    RULE_comparator = 32
    RULE_threshold_value = 33
    RULE_diff = 34
    RULE_freshness_threshold_value = 35
    RULE_reference_check = 36
    RULE_reference_must_exist = 37
    RULE_source_column_name = 38
    RULE_target_column_name = 39
    RULE_section_header = 40
    RULE_table_checks_header = 41
    RULE_partition_name = 42
    RULE_table_filter_header = 43
    RULE_column_configurations_header = 44
    RULE_checks_for_each_dataset_header = 45
    RULE_checks_for_each_column_header = 46
    RULE_reconciliation_check_header = 47
    RULE_signed_number = 48
    RULE_number = 49
    RULE_integer = 50
    RULE_identifier = 51

    ruleNames =  [ "check", "reconciliation_check", "reconciliation_row_diff_check", 
                   "reconciliation_metric_check", "reconciliation_schema_check", 
                   "freshness_check", "freshness_variable", "warn_qualifier", 
                   "failed_rows_check", "group_by_check", "row_count_comparison_check", 
                   "metric_check", "default_anomaly_threshold", "change_over_time", 
                   "change_over_time_config", "change_aggregation", "same_day_last_week", 
                   "percent", "anomaly_score", "metric", "metric_name", 
                   "metric_args", "metric_arg", "threshold", "reconciliation_threshold", 
                   "between_threshold", "reconciliation_between_threshold", 
                   "comparator_threshold", "reconciliation_comparator_threshold", 
                   "zones_threshold", "outcome", "zone_comparator", "comparator", 
                   "threshold_value", "diff", "freshness_threshold_value", 
                   "reference_check", "reference_must_exist", "source_column_name", 
                   "target_column_name", "section_header", "table_checks_header", 
                   "partition_name", "table_filter_header", "column_configurations_header", 
                   "checks_for_each_dataset_header", "checks_for_each_column_header", 
                   "reconciliation_check_header", "signed_number", "number", 
                   "integer", "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    FOR=24
    AND=25
    BETWEEN=26
    NOT=27
    IN=28
    WARN=29
    FAIL=30
    PASS=31
    CHANGE=32
    LAST=33
    AVG=34
    MIN=35
    MAX=36
    SQUARE_LEFT=37
    SQUARE_RIGHT=38
    CURLY_LEFT=39
    CURLY_RIGHT=40
    ROUND_LEFT=41
    ROUND_RIGHT=42
    COMMA=43
    PERCENT=44
    PLUS=45
    MINUS=46
    NOT_EQUAL=47
    NOT_EQUAL_SQL=48
    LTE=49
    GTE=50
    EQUAL=51
    LT=52
    GT=53
    IDENTIFIER_DOUBLE_QUOTE=54
    IDENTIFIER_BACKTICK=55
    IDENTIFIER_UNQUOTED=56
    IDENTIFIER_SQUARE_BRACKETS=57
    STRING=58
    DIGITS=59
    TIMEUNIT=60
    DAY=61
    HOUR=62
    MINUTE=63
    S=64

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def failed_rows_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Failed_rows_checkContext,0)


        def row_count_comparison_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Row_count_comparison_checkContext,0)


        def metric_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Metric_checkContext,0)


        def reference_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reference_checkContext,0)


        def freshness_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Freshness_checkContext,0)


        def group_by_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Group_by_checkContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheck" ):
                return visitor.visitCheck(self)
            else:
                return visitor.visitChildren(self)




    def check(self):

        localctx = SodaCLAntlrParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_check)
        try:
            self.state = 110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 104
                self.failed_rows_check()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 105
                self.row_count_comparison_check()
                pass
            elif token in [11, 32, 34, 35, 36, 54, 55, 56, 57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 106
                self.metric_check()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 4)
                self.state = 107
                self.reference_check()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 5)
                self.state = 108
                self.freshness_check()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 109
                self.group_by_check()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reconciliation_metric_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_metric_checkContext,0)


        def reconciliation_row_diff_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_row_diff_checkContext,0)


        def reconciliation_schema_check(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_schema_checkContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_check" ):
                listener.enterReconciliation_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_check" ):
                listener.exitReconciliation_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_check" ):
                return visitor.visitReconciliation_check(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_check(self):

        localctx = SodaCLAntlrParser.Reconciliation_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_reconciliation_check)
        try:
            self.state = 115
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 35, 36, 54, 55, 56, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 112
                self.reconciliation_metric_check()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 2)
                self.state = 113
                self.reconciliation_row_diff_check()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 114
                self.reconciliation_schema_check()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_row_diff_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.ThresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_row_diff_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_row_diff_check" ):
                listener.enterReconciliation_row_diff_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_row_diff_check" ):
                listener.exitReconciliation_row_diff_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_row_diff_check" ):
                return visitor.visitReconciliation_row_diff_check(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_row_diff_check(self):

        localctx = SodaCLAntlrParser.Reconciliation_row_diff_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_reconciliation_row_diff_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 117
            self.match(SodaCLAntlrParser.T__0)
            self.state = 120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 118
                self.match(SodaCLAntlrParser.S)
                self.state = 119
                self.threshold()


            self.state = 122
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_metric_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metric(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.MetricContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def reconciliation_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_thresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_metric_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_metric_check" ):
                listener.enterReconciliation_metric_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_metric_check" ):
                listener.exitReconciliation_metric_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_metric_check" ):
                return visitor.visitReconciliation_metric_check(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_metric_check(self):

        localctx = SodaCLAntlrParser.Reconciliation_metric_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_reconciliation_metric_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 124
            self.metric()
            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 125
                self.match(SodaCLAntlrParser.S)
                self.state = 126
                self.reconciliation_threshold()


            self.state = 129
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_schema_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.ThresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_schema_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_schema_check" ):
                listener.enterReconciliation_schema_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_schema_check" ):
                listener.exitReconciliation_schema_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_schema_check" ):
                return visitor.visitReconciliation_schema_check(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_schema_check(self):

        localctx = SodaCLAntlrParser.Reconciliation_schema_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_reconciliation_schema_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 131
            self.match(SodaCLAntlrParser.T__1)
            self.state = 134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 132
                self.match(SodaCLAntlrParser.S)
                self.state = 133
                self.threshold()


            self.state = 136
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freshness_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def freshness_variable(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Freshness_variableContext,0)


        def LT(self):
            return self.getToken(SodaCLAntlrParser.LT, 0)

        def freshness_threshold_value(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Freshness_threshold_valueContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_freshness_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreshness_check" ):
                listener.enterFreshness_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreshness_check" ):
                listener.exitFreshness_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFreshness_check" ):
                return visitor.visitFreshness_check(self)
            else:
                return visitor.visitChildren(self)




    def freshness_check(self):

        localctx = SodaCLAntlrParser.Freshness_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_freshness_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 138
            self.match(SodaCLAntlrParser.T__2)
            self.state = 139
            self.match(SodaCLAntlrParser.S)
            self.state = 140
            self.identifier()
            self.state = 142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 141
                self.freshness_variable()


            self.state = 148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 144
                self.match(SodaCLAntlrParser.S)
                self.state = 145
                self.match(SodaCLAntlrParser.LT)
                self.state = 146
                self.match(SodaCLAntlrParser.S)
                self.state = 147
                self.freshness_threshold_value()


            self.state = 150
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freshness_variableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_freshness_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreshness_variable" ):
                listener.enterFreshness_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreshness_variable" ):
                listener.exitFreshness_variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFreshness_variable" ):
                return visitor.visitFreshness_variable(self)
            else:
                return visitor.visitChildren(self)




    def freshness_variable(self):

        localctx = SodaCLAntlrParser.Freshness_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_freshness_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.match(SodaCLAntlrParser.S)
            self.state = 153
            self.match(SodaCLAntlrParser.T__3)
            self.state = 154
            self.match(SodaCLAntlrParser.S)
            self.state = 155
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Warn_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def WARN(self):
            return self.getToken(SodaCLAntlrParser.WARN, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_warn_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWarn_qualifier" ):
                listener.enterWarn_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWarn_qualifier" ):
                listener.exitWarn_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWarn_qualifier" ):
                return visitor.visitWarn_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def warn_qualifier(self):

        localctx = SodaCLAntlrParser.Warn_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_warn_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 157
            self.match(SodaCLAntlrParser.S)
            self.state = 158
            self.match(SodaCLAntlrParser.WARN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Failed_rows_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_failed_rows_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFailed_rows_check" ):
                listener.enterFailed_rows_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFailed_rows_check" ):
                listener.exitFailed_rows_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailed_rows_check" ):
                return visitor.visitFailed_rows_check(self)
            else:
                return visitor.visitChildren(self)




    def failed_rows_check(self):

        localctx = SodaCLAntlrParser.Failed_rows_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_failed_rows_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            self.match(SodaCLAntlrParser.T__4)
            self.state = 161
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_group_by_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_check" ):
                listener.enterGroup_by_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_check" ):
                listener.exitGroup_by_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_check" ):
                return visitor.visitGroup_by_check(self)
            else:
                return visitor.visitChildren(self)




    def group_by_check(self):

        localctx = SodaCLAntlrParser.Group_by_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_group_by_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 163
            self.match(SodaCLAntlrParser.T__5)
            self.state = 164
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Row_count_comparison_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,i)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def partition_name(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Partition_nameContext,0)


        def IN(self):
            return self.getToken(SodaCLAntlrParser.IN, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_row_count_comparison_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_count_comparison_check" ):
                listener.enterRow_count_comparison_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_count_comparison_check" ):
                listener.exitRow_count_comparison_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_count_comparison_check" ):
                return visitor.visitRow_count_comparison_check(self)
            else:
                return visitor.visitChildren(self)




    def row_count_comparison_check(self):

        localctx = SodaCLAntlrParser.Row_count_comparison_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_row_count_comparison_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.match(SodaCLAntlrParser.T__6)
            self.state = 167
            self.match(SodaCLAntlrParser.S)
            self.state = 168
            self.identifier()
            self.state = 171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 169
                self.match(SodaCLAntlrParser.S)
                self.state = 170
                self.partition_name()


            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 173
                self.match(SodaCLAntlrParser.S)
                self.state = 174
                self.match(SodaCLAntlrParser.IN)
                self.state = 175
                self.match(SodaCLAntlrParser.S)
                self.state = 176
                self.identifier()


            self.state = 179
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Metric_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metric(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.MetricContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def change_over_time(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Change_over_timeContext,0)


        def anomaly_score(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Anomaly_scoreContext,0)


        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.ThresholdContext,0)


        def default_anomaly_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Default_anomaly_thresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric_check" ):
                listener.enterMetric_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric_check" ):
                listener.exitMetric_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric_check" ):
                return visitor.visitMetric_check(self)
            else:
                return visitor.visitChildren(self)




    def metric_check(self):

        localctx = SodaCLAntlrParser.Metric_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_metric_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.state = 181
                self.change_over_time()
                pass
            elif token in [11]:
                self.state = 182
                self.anomaly_score()
                pass
            elif token in [34, 35, 36, 54, 55, 56, 57]:
                pass
            else:
                pass
            self.state = 185
            self.metric()
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 186
                self.match(SodaCLAntlrParser.S)
                self.state = 189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 187
                    self.threshold()
                    pass

                elif la_ == 2:
                    self.state = 188
                    self.default_anomaly_threshold()
                    pass




            self.state = 193
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_anomaly_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(SodaCLAntlrParser.LT, 0)

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_default_anomaly_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_anomaly_threshold" ):
                listener.enterDefault_anomaly_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_anomaly_threshold" ):
                listener.exitDefault_anomaly_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_anomaly_threshold" ):
                return visitor.visitDefault_anomaly_threshold(self)
            else:
                return visitor.visitChildren(self)




    def default_anomaly_threshold(self):

        localctx = SodaCLAntlrParser.Default_anomaly_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_default_anomaly_threshold)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(SodaCLAntlrParser.LT)
            self.state = 196
            self.match(SodaCLAntlrParser.S)
            self.state = 197
            self.match(SodaCLAntlrParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_over_timeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(SodaCLAntlrParser.CHANGE, 0)

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def FOR(self):
            return self.getToken(SodaCLAntlrParser.FOR, 0)

        def change_over_time_config(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Change_over_time_configContext,0)


        def percent(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.PercentContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_change_over_time

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_over_time" ):
                listener.enterChange_over_time(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_over_time" ):
                listener.exitChange_over_time(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_over_time" ):
                return visitor.visitChange_over_time(self)
            else:
                return visitor.visitChildren(self)




    def change_over_time(self):

        localctx = SodaCLAntlrParser.Change_over_timeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_change_over_time)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(SodaCLAntlrParser.CHANGE)
            self.state = 200
            self.match(SodaCLAntlrParser.S)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 120259084800) != 0:
                self.state = 201
                self.change_over_time_config()
                self.state = 202
                self.match(SodaCLAntlrParser.S)


            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 206
                self.percent()


            self.state = 209
            self.match(SodaCLAntlrParser.FOR)
            self.state = 210
            self.match(SodaCLAntlrParser.S)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_over_time_configContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def change_aggregation(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Change_aggregationContext,0)


        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def LAST(self):
            return self.getToken(SodaCLAntlrParser.LAST, 0)

        def integer(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IntegerContext,0)


        def same_day_last_week(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Same_day_last_weekContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_change_over_time_config

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_over_time_config" ):
                listener.enterChange_over_time_config(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_over_time_config" ):
                listener.exitChange_over_time_config(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_over_time_config" ):
                return visitor.visitChange_over_time_config(self)
            else:
                return visitor.visitChildren(self)




    def change_over_time_config(self):

        localctx = SodaCLAntlrParser.Change_over_time_configContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_change_over_time_config)
        try:
            self.state = 219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 35, 36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 212
                self.change_aggregation()
                self.state = 213
                self.match(SodaCLAntlrParser.S)
                self.state = 214
                self.match(SodaCLAntlrParser.LAST)
                self.state = 215
                self.match(SodaCLAntlrParser.S)
                self.state = 216
                self.integer()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 218
                self.same_day_last_week()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Change_aggregationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(SodaCLAntlrParser.AVG, 0)

        def MIN(self):
            return self.getToken(SodaCLAntlrParser.MIN, 0)

        def MAX(self):
            return self.getToken(SodaCLAntlrParser.MAX, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_change_aggregation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_aggregation" ):
                listener.enterChange_aggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_aggregation" ):
                listener.exitChange_aggregation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_aggregation" ):
                return visitor.visitChange_aggregation(self)
            else:
                return visitor.visitChildren(self)




    def change_aggregation(self):

        localctx = SodaCLAntlrParser.Change_aggregationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_change_aggregation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 120259084288) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Same_day_last_weekContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_same_day_last_week

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSame_day_last_week" ):
                listener.enterSame_day_last_week(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSame_day_last_week" ):
                listener.exitSame_day_last_week(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSame_day_last_week" ):
                return visitor.visitSame_day_last_week(self)
            else:
                return visitor.visitChildren(self)




    def same_day_last_week(self):

        localctx = SodaCLAntlrParser.Same_day_last_weekContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_same_day_last_week)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(SodaCLAntlrParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PercentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_percent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPercent" ):
                listener.enterPercent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPercent" ):
                listener.exitPercent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPercent" ):
                return visitor.visitPercent(self)
            else:
                return visitor.visitChildren(self)




    def percent(self):

        localctx = SodaCLAntlrParser.PercentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_percent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(SodaCLAntlrParser.T__9)
            self.state = 226
            self.match(SodaCLAntlrParser.S)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anomaly_scoreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_anomaly_score

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnomaly_score" ):
                listener.enterAnomaly_score(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnomaly_score" ):
                listener.exitAnomaly_score(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnomaly_score" ):
                return visitor.visitAnomaly_score(self)
            else:
                return visitor.visitChildren(self)




    def anomaly_score(self):

        localctx = SodaCLAntlrParser.Anomaly_scoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_anomaly_score)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(SodaCLAntlrParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetricContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metric_name(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Metric_nameContext,0)


        def metric_args(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Metric_argsContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric" ):
                listener.enterMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric" ):
                listener.exitMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric" ):
                return visitor.visitMetric(self)
            else:
                return visitor.visitChildren(self)




    def metric(self):

        localctx = SodaCLAntlrParser.MetricContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_metric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.metric_name()
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 231
                self.metric_args()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Metric_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric_name" ):
                listener.enterMetric_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric_name" ):
                listener.exitMetric_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric_name" ):
                return visitor.visitMetric_name(self)
            else:
                return visitor.visitChildren(self)




    def metric_name(self):

        localctx = SodaCLAntlrParser.Metric_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_metric_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Metric_argsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROUND_LEFT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_LEFT, 0)

        def metric_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Metric_argContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Metric_argContext,i)


        def ROUND_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_RIGHT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.COMMA)
            else:
                return self.getToken(SodaCLAntlrParser.COMMA, i)

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric_args" ):
                listener.enterMetric_args(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric_args" ):
                listener.exitMetric_args(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric_args" ):
                return visitor.visitMetric_args(self)
            else:
                return visitor.visitChildren(self)




    def metric_args(self):

        localctx = SodaCLAntlrParser.Metric_argsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_metric_args)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(SodaCLAntlrParser.ROUND_LEFT)
            self.state = 237
            self.metric_arg()
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==43:
                self.state = 238
                self.match(SodaCLAntlrParser.COMMA)
                self.state = 239
                self.match(SodaCLAntlrParser.S)
                self.state = 240
                self.metric_arg()
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 246
            self.match(SodaCLAntlrParser.ROUND_RIGHT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Metric_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Signed_numberContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_metric_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetric_arg" ):
                listener.enterMetric_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetric_arg" ):
                listener.exitMetric_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetric_arg" ):
                return visitor.visitMetric_arg(self)
            else:
                return visitor.visitChildren(self)




    def metric_arg(self):

        localctx = SodaCLAntlrParser.Metric_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_metric_arg)
        try:
            self.state = 250
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 45, 46, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 248
                self.signed_number()
                pass
            elif token in [34, 35, 36, 54, 55, 56, 57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparator_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Comparator_thresholdContext,0)


        def between_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Between_thresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreshold" ):
                listener.enterThreshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreshold" ):
                listener.exitThreshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThreshold" ):
                return visitor.visitThreshold(self)
            else:
                return visitor.visitChildren(self)




    def threshold(self):

        localctx = SodaCLAntlrParser.ThresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_threshold)
        try:
            self.state = 254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47, 48, 49, 50, 51, 52, 53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.comparator_threshold()
                pass
            elif token in [26, 27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.between_threshold()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reconciliation_comparator_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_comparator_thresholdContext,0)


        def reconciliation_between_threshold(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_between_thresholdContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_threshold" ):
                listener.enterReconciliation_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_threshold" ):
                listener.exitReconciliation_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_threshold" ):
                return visitor.visitReconciliation_threshold(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_threshold(self):

        localctx = SodaCLAntlrParser.Reconciliation_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_reconciliation_threshold)
        try:
            self.state = 258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.reconciliation_comparator_threshold()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 257
                self.reconciliation_between_threshold()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(SodaCLAntlrParser.BETWEEN, 0)

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def threshold_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Threshold_valueContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,i)


        def AND(self):
            return self.getToken(SodaCLAntlrParser.AND, 0)

        def NOT(self):
            return self.getToken(SodaCLAntlrParser.NOT, 0)

        def SQUARE_LEFT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_LEFT, 0)

        def ROUND_LEFT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_LEFT, 0)

        def SQUARE_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_RIGHT, 0)

        def ROUND_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_RIGHT, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_between_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_threshold" ):
                listener.enterBetween_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_threshold" ):
                listener.exitBetween_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_threshold" ):
                return visitor.visitBetween_threshold(self)
            else:
                return visitor.visitChildren(self)




    def between_threshold(self):

        localctx = SodaCLAntlrParser.Between_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_between_threshold)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 260
                self.match(SodaCLAntlrParser.NOT)
                self.state = 261
                self.match(SodaCLAntlrParser.S)


            self.state = 264
            self.match(SodaCLAntlrParser.BETWEEN)
            self.state = 265
            self.match(SodaCLAntlrParser.S)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37 or _la==41:
                self.state = 266
                _la = self._input.LA(1)
                if not(_la==37 or _la==41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 269
            self.threshold_value()
            self.state = 270
            self.match(SodaCLAntlrParser.S)
            self.state = 271
            self.match(SodaCLAntlrParser.AND)
            self.state = 272
            self.match(SodaCLAntlrParser.S)
            self.state = 273
            self.threshold_value()
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38 or _la==42:
                self.state = 274
                _la = self._input.LA(1)
                if not(_la==38 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_between_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diff(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.DiffContext,0)


        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def BETWEEN(self):
            return self.getToken(SodaCLAntlrParser.BETWEEN, 0)

        def threshold_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Threshold_valueContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,i)


        def AND(self):
            return self.getToken(SodaCLAntlrParser.AND, 0)

        def NOT(self):
            return self.getToken(SodaCLAntlrParser.NOT, 0)

        def SQUARE_LEFT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_LEFT, 0)

        def ROUND_LEFT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_LEFT, 0)

        def SQUARE_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.SQUARE_RIGHT, 0)

        def ROUND_RIGHT(self):
            return self.getToken(SodaCLAntlrParser.ROUND_RIGHT, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_between_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_between_threshold" ):
                listener.enterReconciliation_between_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_between_threshold" ):
                listener.exitReconciliation_between_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_between_threshold" ):
                return visitor.visitReconciliation_between_threshold(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_between_threshold(self):

        localctx = SodaCLAntlrParser.Reconciliation_between_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_reconciliation_between_threshold)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.diff()
            self.state = 278
            self.match(SodaCLAntlrParser.S)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 279
                self.match(SodaCLAntlrParser.NOT)
                self.state = 280
                self.match(SodaCLAntlrParser.S)


            self.state = 283
            self.match(SodaCLAntlrParser.BETWEEN)
            self.state = 284
            self.match(SodaCLAntlrParser.S)
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37 or _la==41:
                self.state = 285
                _la = self._input.LA(1)
                if not(_la==37 or _la==41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 288
            self.threshold_value()
            self.state = 289
            self.match(SodaCLAntlrParser.S)
            self.state = 290
            self.match(SodaCLAntlrParser.AND)
            self.state = 291
            self.match(SodaCLAntlrParser.S)
            self.state = 292
            self.threshold_value()
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38 or _la==42:
                self.state = 293
                _la = self._input.LA(1)
                if not(_la==38 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparator_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparator(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.ComparatorContext,0)


        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def threshold_value(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_comparator_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparator_threshold" ):
                listener.enterComparator_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparator_threshold" ):
                listener.exitComparator_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparator_threshold" ):
                return visitor.visitComparator_threshold(self)
            else:
                return visitor.visitChildren(self)




    def comparator_threshold(self):

        localctx = SodaCLAntlrParser.Comparator_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_comparator_threshold)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.comparator()
            self.state = 297
            self.match(SodaCLAntlrParser.S)
            self.state = 298
            self.threshold_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_comparator_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diff(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.DiffContext,0)


        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def comparator(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.ComparatorContext,0)


        def threshold_value(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_comparator_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_comparator_threshold" ):
                listener.enterReconciliation_comparator_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_comparator_threshold" ):
                listener.exitReconciliation_comparator_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_comparator_threshold" ):
                return visitor.visitReconciliation_comparator_threshold(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_comparator_threshold(self):

        localctx = SodaCLAntlrParser.Reconciliation_comparator_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_reconciliation_comparator_threshold)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.diff()
            self.state = 301
            self.match(SodaCLAntlrParser.S)
            self.state = 302
            self.comparator()
            self.state = 303
            self.match(SodaCLAntlrParser.S)
            self.state = 304
            self.threshold_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Zones_thresholdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def outcome(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.OutcomeContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.OutcomeContext,i)


        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def zone_comparator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Zone_comparatorContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Zone_comparatorContext,i)


        def threshold_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Threshold_valueContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Threshold_valueContext,i)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_zones_threshold

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZones_threshold" ):
                listener.enterZones_threshold(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZones_threshold" ):
                listener.exitZones_threshold(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZones_threshold" ):
                return visitor.visitZones_threshold(self)
            else:
                return visitor.visitChildren(self)




    def zones_threshold(self):

        localctx = SodaCLAntlrParser.Zones_thresholdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_zones_threshold)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 306
                    self.outcome()
                    self.state = 307
                    self.match(SodaCLAntlrParser.S)
                    self.state = 308
                    self.zone_comparator()
                    self.state = 309
                    self.match(SodaCLAntlrParser.S)
                    self.state = 310
                    self.threshold_value()
                    self.state = 311
                    self.match(SodaCLAntlrParser.S)
                    self.state = 312
                    self.zone_comparator()
                    self.state = 313
                    self.match(SodaCLAntlrParser.S)

                else:
                    raise NoViableAltException(self)
                self.state = 317 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

            self.state = 319
            self.outcome()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WARN(self):
            return self.getToken(SodaCLAntlrParser.WARN, 0)

        def FAIL(self):
            return self.getToken(SodaCLAntlrParser.FAIL, 0)

        def PASS(self):
            return self.getToken(SodaCLAntlrParser.PASS, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_outcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutcome" ):
                listener.enterOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutcome" ):
                listener.exitOutcome(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutcome" ):
                return visitor.visitOutcome(self)
            else:
                return visitor.visitChildren(self)




    def outcome(self):

        localctx = SodaCLAntlrParser.OutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_outcome)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 3758096384) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Zone_comparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(SodaCLAntlrParser.LT, 0)

        def LTE(self):
            return self.getToken(SodaCLAntlrParser.LTE, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_zone_comparator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZone_comparator" ):
                listener.enterZone_comparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZone_comparator" ):
                listener.exitZone_comparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitZone_comparator" ):
                return visitor.visitZone_comparator(self)
            else:
                return visitor.visitChildren(self)




    def zone_comparator(self):

        localctx = SodaCLAntlrParser.Zone_comparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_zone_comparator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            _la = self._input.LA(1)
            if not(_la==49 or _la==52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(SodaCLAntlrParser.LT, 0)

        def LTE(self):
            return self.getToken(SodaCLAntlrParser.LTE, 0)

        def EQUAL(self):
            return self.getToken(SodaCLAntlrParser.EQUAL, 0)

        def GTE(self):
            return self.getToken(SodaCLAntlrParser.GTE, 0)

        def GT(self):
            return self.getToken(SodaCLAntlrParser.GT, 0)

        def NOT_EQUAL(self):
            return self.getToken(SodaCLAntlrParser.NOT_EQUAL, 0)

        def NOT_EQUAL_SQL(self):
            return self.getToken(SodaCLAntlrParser.NOT_EQUAL_SQL, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_comparator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparator" ):
                listener.enterComparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparator" ):
                listener.exitComparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparator" ):
                return visitor.visitComparator(self)
            else:
                return visitor.visitChildren(self)




    def comparator(self):

        localctx = SodaCLAntlrParser.ComparatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_comparator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 17873661021126656) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Threshold_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Signed_numberContext,0)


        def PERCENT(self):
            return self.getToken(SodaCLAntlrParser.PERCENT, 0)

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def freshness_threshold_value(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Freshness_threshold_valueContext,0)


        def IDENTIFIER_UNQUOTED(self):
            return self.getToken(SodaCLAntlrParser.IDENTIFIER_UNQUOTED, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_threshold_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreshold_value" ):
                listener.enterThreshold_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreshold_value" ):
                listener.exitThreshold_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThreshold_value" ):
                return visitor.visitThreshold_value(self)
            else:
                return visitor.visitChildren(self)




    def threshold_value(self):

        localctx = SodaCLAntlrParser.Threshold_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_threshold_value)
        self._la = 0 # Token type
        try:
            self.state = 336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 45, 46, 59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 327
                self.signed_number()
                self.state = 332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==64:
                        self.state = 328
                        self.match(SodaCLAntlrParser.S)


                    self.state = 331
                    self.match(SodaCLAntlrParser.PERCENT)


                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 334
                self.freshness_threshold_value()
                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 3)
                self.state = 335
                self.match(SodaCLAntlrParser.IDENTIFIER_UNQUOTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiffContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_diff

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiff" ):
                listener.enterDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiff" ):
                listener.exitDiff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDiff" ):
                return visitor.visitDiff(self)
            else:
                return visitor.visitChildren(self)




    def diff(self):

        localctx = SodaCLAntlrParser.DiffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_diff)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(SodaCLAntlrParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Freshness_threshold_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMEUNIT(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.TIMEUNIT)
            else:
                return self.getToken(SodaCLAntlrParser.TIMEUNIT, i)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_freshness_threshold_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreshness_threshold_value" ):
                listener.enterFreshness_threshold_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreshness_threshold_value" ):
                listener.exitFreshness_threshold_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFreshness_threshold_value" ):
                return visitor.visitFreshness_threshold_value(self)
            else:
                return visitor.visitChildren(self)




    def freshness_threshold_value(self):

        localctx = SodaCLAntlrParser.Freshness_threshold_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_freshness_threshold_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 340
                self.match(SodaCLAntlrParser.TIMEUNIT)
                self.state = 343 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==60):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def source_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Source_column_nameContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Source_column_nameContext,i)


        def reference_must_exist(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reference_must_existContext,0)


        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def target_column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SodaCLAntlrParser.Target_column_nameContext)
            else:
                return self.getTypedRuleContext(SodaCLAntlrParser.Target_column_nameContext,i)


        def ROUND_LEFT(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.ROUND_LEFT)
            else:
                return self.getToken(SodaCLAntlrParser.ROUND_LEFT, i)

        def ROUND_RIGHT(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.ROUND_RIGHT)
            else:
                return self.getToken(SodaCLAntlrParser.ROUND_RIGHT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.COMMA)
            else:
                return self.getToken(SodaCLAntlrParser.COMMA, i)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reference_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_check" ):
                listener.enterReference_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_check" ):
                listener.exitReference_check(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_check" ):
                return visitor.visitReference_check(self)
            else:
                return visitor.visitChildren(self)




    def reference_check(self):

        localctx = SodaCLAntlrParser.Reference_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_reference_check)
        self._la = 0 # Token type
        try:
            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 345
                self.match(SodaCLAntlrParser.T__12)
                self.state = 346
                self.match(SodaCLAntlrParser.S)
                self.state = 347
                self.source_column_name()
                self.state = 348
                self.match(SodaCLAntlrParser.S)
                self.state = 349
                self.reference_must_exist()
                self.state = 350
                self.match(SodaCLAntlrParser.S)
                self.state = 351
                self.identifier()
                self.state = 352
                self.match(SodaCLAntlrParser.S)
                self.state = 353
                self.target_column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 355
                self.match(SodaCLAntlrParser.T__12)
                self.state = 356
                self.match(SodaCLAntlrParser.S)
                self.state = 357
                self.match(SodaCLAntlrParser.ROUND_LEFT)
                self.state = 358
                self.source_column_name()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==43:
                    self.state = 359
                    self.match(SodaCLAntlrParser.COMMA)
                    self.state = 360
                    self.match(SodaCLAntlrParser.S)
                    self.state = 361
                    self.source_column_name()
                    self.state = 366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 367
                self.match(SodaCLAntlrParser.ROUND_RIGHT)
                self.state = 368
                self.match(SodaCLAntlrParser.S)
                self.state = 369
                self.reference_must_exist()
                self.state = 370
                self.match(SodaCLAntlrParser.S)
                self.state = 371
                self.identifier()
                self.state = 372
                self.match(SodaCLAntlrParser.S)
                self.state = 373
                self.match(SodaCLAntlrParser.ROUND_LEFT)
                self.state = 374
                self.target_column_name()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==43:
                    self.state = 375
                    self.match(SodaCLAntlrParser.COMMA)
                    self.state = 376
                    self.match(SodaCLAntlrParser.S)
                    self.state = 377
                    self.target_column_name()
                    self.state = 382
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 383
                self.match(SodaCLAntlrParser.ROUND_RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_must_existContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def NOT(self):
            return self.getToken(SodaCLAntlrParser.NOT, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reference_must_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_must_exist" ):
                listener.enterReference_must_exist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_must_exist" ):
                listener.exitReference_must_exist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReference_must_exist" ):
                return visitor.visitReference_must_exist(self)
            else:
                return visitor.visitChildren(self)




    def reference_must_exist(self):

        localctx = SodaCLAntlrParser.Reference_must_existContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_reference_must_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(SodaCLAntlrParser.T__13)
            self.state = 388
            self.match(SodaCLAntlrParser.S)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 389
                self.match(SodaCLAntlrParser.NOT)
                self.state = 390
                self.match(SodaCLAntlrParser.S)


            self.state = 393
            self.match(SodaCLAntlrParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_source_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_column_name" ):
                listener.enterSource_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_column_name" ):
                listener.exitSource_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSource_column_name" ):
                return visitor.visitSource_column_name(self)
            else:
                return visitor.visitChildren(self)




    def source_column_name(self):

        localctx = SodaCLAntlrParser.Source_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_source_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_target_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_column_name" ):
                listener.enterTarget_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_column_name" ):
                listener.exitTarget_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_column_name" ):
                return visitor.visitTarget_column_name(self)
            else:
                return visitor.visitChildren(self)




    def target_column_name(self):

        localctx = SodaCLAntlrParser.Target_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_target_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Section_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_checks_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Table_checks_headerContext,0)


        def column_configurations_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Column_configurations_headerContext,0)


        def table_filter_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Table_filter_headerContext,0)


        def checks_for_each_dataset_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Checks_for_each_dataset_headerContext,0)


        def checks_for_each_column_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Checks_for_each_column_headerContext,0)


        def reconciliation_check_header(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Reconciliation_check_headerContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_section_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection_header" ):
                listener.enterSection_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection_header" ):
                listener.exitSection_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSection_header" ):
                return visitor.visitSection_header(self)
            else:
                return visitor.visitChildren(self)




    def section_header(self):

        localctx = SodaCLAntlrParser.Section_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_section_header)
        try:
            self.state = 405
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 399
                self.table_checks_header()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 400
                self.column_configurations_header()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 401
                self.table_filter_header()
                pass
            elif token in [19, 20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 402
                self.checks_for_each_dataset_header()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 5)
                self.state = 403
                self.checks_for_each_column_header()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 6)
                self.state = 404
                self.reconciliation_check_header()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_checks_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def partition_name(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Partition_nameContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_table_checks_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_checks_header" ):
                listener.enterTable_checks_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_checks_header" ):
                listener.exitTable_checks_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_checks_header" ):
                return visitor.visitTable_checks_header(self)
            else:
                return visitor.visitChildren(self)




    def table_checks_header(self):

        localctx = SodaCLAntlrParser.Table_checks_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_table_checks_header)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(SodaCLAntlrParser.T__15)
            self.state = 408
            self.match(SodaCLAntlrParser.S)
            self.state = 409
            self.identifier()
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 410
                self.match(SodaCLAntlrParser.S)
                self.state = 411
                self.partition_name()


            self.state = 414
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_partition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_name" ):
                listener.enterPartition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_name" ):
                listener.exitPartition_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_name" ):
                return visitor.visitPartition_name(self)
            else:
                return visitor.visitChildren(self)




    def partition_name(self):

        localctx = SodaCLAntlrParser.Partition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_partition_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_filter_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.S)
            else:
                return self.getToken(SodaCLAntlrParser.S, i)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def partition_name(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.Partition_nameContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_table_filter_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_filter_header" ):
                listener.enterTable_filter_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_filter_header" ):
                listener.exitTable_filter_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_filter_header" ):
                return visitor.visitTable_filter_header(self)
            else:
                return visitor.visitChildren(self)




    def table_filter_header(self):

        localctx = SodaCLAntlrParser.Table_filter_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_table_filter_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(SodaCLAntlrParser.T__16)
            self.state = 419
            self.match(SodaCLAntlrParser.S)
            self.state = 420
            self.identifier()
            self.state = 421
            self.match(SodaCLAntlrParser.S)
            self.state = 422
            self.partition_name()
            self.state = 423
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_configurations_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_column_configurations_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_configurations_header" ):
                listener.enterColumn_configurations_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_configurations_header" ):
                listener.exitColumn_configurations_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_configurations_header" ):
                return visitor.visitColumn_configurations_header(self)
            else:
                return visitor.visitChildren(self)




    def column_configurations_header(self):

        localctx = SodaCLAntlrParser.Column_configurations_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_column_configurations_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(SodaCLAntlrParser.T__17)
            self.state = 426
            self.match(SodaCLAntlrParser.S)
            self.state = 427
            self.identifier()
            self.state = 428
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checks_for_each_dataset_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_checks_for_each_dataset_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecks_for_each_dataset_header" ):
                listener.enterChecks_for_each_dataset_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecks_for_each_dataset_header" ):
                listener.exitChecks_for_each_dataset_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChecks_for_each_dataset_header" ):
                return visitor.visitChecks_for_each_dataset_header(self)
            else:
                return visitor.visitChildren(self)




    def checks_for_each_dataset_header(self):

        localctx = SodaCLAntlrParser.Checks_for_each_dataset_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_checks_for_each_dataset_header)
        try:
            self.state = 440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 430
                self.match(SodaCLAntlrParser.T__18)
                self.state = 431
                self.match(SodaCLAntlrParser.S)
                self.state = 432
                self.identifier()
                self.state = 433
                self.match(SodaCLAntlrParser.EOF)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 435
                self.match(SodaCLAntlrParser.T__19)
                self.state = 436
                self.match(SodaCLAntlrParser.S)
                self.state = 437
                self.identifier()
                self.state = 438
                self.match(SodaCLAntlrParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checks_for_each_column_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_checks_for_each_column_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecks_for_each_column_header" ):
                listener.enterChecks_for_each_column_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecks_for_each_column_header" ):
                listener.exitChecks_for_each_column_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChecks_for_each_column_header" ):
                return visitor.visitChecks_for_each_column_header(self)
            else:
                return visitor.visitChildren(self)




    def checks_for_each_column_header(self):

        localctx = SodaCLAntlrParser.Checks_for_each_column_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_checks_for_each_column_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(SodaCLAntlrParser.T__20)
            self.state = 443
            self.match(SodaCLAntlrParser.S)
            self.state = 444
            self.identifier()
            self.state = 445
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reconciliation_check_headerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def S(self):
            return self.getToken(SodaCLAntlrParser.S, 0)

        def identifier(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IdentifierContext,0)


        def EOF(self):
            return self.getToken(SodaCLAntlrParser.EOF, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_reconciliation_check_header

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReconciliation_check_header" ):
                listener.enterReconciliation_check_header(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReconciliation_check_header" ):
                listener.exitReconciliation_check_header(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReconciliation_check_header" ):
                return visitor.visitReconciliation_check_header(self)
            else:
                return visitor.visitChildren(self)




    def reconciliation_check_header(self):

        localctx = SodaCLAntlrParser.Reconciliation_check_headerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_reconciliation_check_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(SodaCLAntlrParser.T__21)
            self.state = 448
            self.match(SodaCLAntlrParser.S)
            self.state = 449
            self.identifier()
            self.state = 450
            self.match(SodaCLAntlrParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.NumberContext,0)


        def PLUS(self):
            return self.getToken(SodaCLAntlrParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SodaCLAntlrParser.MINUS, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = SodaCLAntlrParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45 or _la==46:
                self.state = 452
                _la = self._input.LA(1)
                if not(_la==45 or _la==46):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 455
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(SodaCLAntlrParser.IntegerContext,0)


        def DIGITS(self, i:int=None):
            if i is None:
                return self.getTokens(SodaCLAntlrParser.DIGITS)
            else:
                return self.getToken(SodaCLAntlrParser.DIGITS, i)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = SodaCLAntlrParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                self.integer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.match(SodaCLAntlrParser.DIGITS)
                self.state = 459
                self.match(SodaCLAntlrParser.T__22)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 460
                    self.match(SodaCLAntlrParser.DIGITS)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 463
                    self.match(SodaCLAntlrParser.DIGITS)


                self.state = 466
                self.match(SodaCLAntlrParser.T__22)
                self.state = 467
                self.match(SodaCLAntlrParser.DIGITS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITS(self):
            return self.getToken(SodaCLAntlrParser.DIGITS, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = SodaCLAntlrParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_integer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(SodaCLAntlrParser.DIGITS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER_UNQUOTED(self):
            return self.getToken(SodaCLAntlrParser.IDENTIFIER_UNQUOTED, 0)

        def IDENTIFIER_DOUBLE_QUOTE(self):
            return self.getToken(SodaCLAntlrParser.IDENTIFIER_DOUBLE_QUOTE, 0)

        def IDENTIFIER_BACKTICK(self):
            return self.getToken(SodaCLAntlrParser.IDENTIFIER_BACKTICK, 0)

        def IDENTIFIER_SQUARE_BRACKETS(self):
            return self.getToken(SodaCLAntlrParser.IDENTIFIER_SQUARE_BRACKETS, 0)

        def MIN(self):
            return self.getToken(SodaCLAntlrParser.MIN, 0)

        def MAX(self):
            return self.getToken(SodaCLAntlrParser.MAX, 0)

        def AVG(self):
            return self.getToken(SodaCLAntlrParser.AVG, 0)

        def getRuleIndex(self):
            return SodaCLAntlrParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = SodaCLAntlrParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 270216097901314048) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





