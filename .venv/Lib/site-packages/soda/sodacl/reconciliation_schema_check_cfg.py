from __future__ import annotations

from soda.model.type_mapping import TypeMapping
from soda.sodacl.check_cfg import CheckCfg
from soda.sodacl.location import Location
from soda.sodacl.schema_check_cfg import SchemaValidations


class ReconciliationSchemaCheckCfg(CheckCfg):
    def __init__(
        self,
        source_header: str,
        source_line: str,
        source_configurations: str | None,
        location: Location,
        name: str | None,
        warn_validations: SchemaValidations,
        fail_validations: SchemaValidations,
        reconciliation_configurations: dict,
        schema_name: str | None = None,
        is_automated_monitoring: bool = False,
        type_mappings: list[TypeMapping] | None = None,
    ):
        super().__init__(source_header, source_line, source_configurations, location, name)
        # TODO: support proper fail/warn configurations
        self.warn_validations: SchemaValidations = warn_validations
        self.fail_validations: SchemaValidations = SchemaValidations(
            required_column_names=None,
            required_column_types=None,
            required_column_indexes=None,
            forbidden_column_names=None,
            is_column_addition_forbidden=True,
            is_column_deletion_forbidden=True,
            is_column_type_change_forbidden=True,
            is_column_index_change_forbidden=True,
        )
        self.is_automated_monitoring = is_automated_monitoring
        self.name = name if name else "Schema Check"
        self.schema_name = schema_name
        self.reconciliation_configurations: dict = reconciliation_configurations
        self.type_mappings: list[TypeMapping] | None = type_mappings

    def has_change_validations(self) -> bool:
        return (self.warn_validations and self.warn_validations.has_change_validations()) or (
            self.fail_validations and self.fail_validations.has_change_validations()
        )
