from __future__ import annotations

from soda.sodacl.check_cfg import CheckCfg
from soda.sodacl.location import Location
from soda.sodacl.threshold_cfg import ThresholdCfg


class ReconciliationRowDiffCheckCfg(CheckCfg):
    def __init__(
        self,
        source_header: str,
        source_line: str,
        source_configurations: dict | None,
        location: Location,
        name: str | None,
        reconciliation_configurations: dict,
        source_columns: list[str] | None,
        target_columns: list[str] | None,
        fail_threshold_cfg: ThresholdCfg | None,
        warn_threshold_cfg: ThresholdCfg | None,
        samples_limit: int | None,
        source_key_columns: list[str] = [],
        target_key_columns: list[str] = [],
        diff_config: dict = {},
    ):
        super().__init__(
            source_header=source_header,
            source_line=source_line,
            source_configurations=source_configurations,
            location=location,
            name=name,
            samples_limit=samples_limit,
        )
        self.reconciliation_configurations: dict = reconciliation_configurations
        self.source_columns: list[str] | None = source_columns
        self.target_columns: list[str] | None = target_columns
        self.source_key_columns: list[str] = source_key_columns
        self.target_key_columns: list[str] = target_key_columns
        self.fail_threshold_cfg: ThresholdCfg | None = fail_threshold_cfg
        self.warn_threshold_cfg: ThresholdCfg | None = warn_threshold_cfg
        self.diff_config: dict = diff_config

    def has_threshold(self):
        return self.fail_threshold_cfg or self.warn_threshold_cfg

    def resolve_thresholds(self, f):
        if self.fail_threshold_cfg:
            self.fail_threshold_cfg = self.fail_threshold_cfg.resolve(f)
        if self.warn_threshold_cfg:
            self.warn_threshold_cfg = self.warn_threshold_cfg.resolve(f)
