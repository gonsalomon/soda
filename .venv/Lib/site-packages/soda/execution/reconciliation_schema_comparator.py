from __future__ import annotations

from soda.execution.data_source import DataSource
from soda.model.type_mapping import TypeMapping


class ReconciliationSchemaComparator:
    def __init__(
        self,
        source_schema,
        target_schema,
        source_data_source,
        target_data_source,
        type_mappings: list[TypeMapping] | None = None,
    ):
        self.source_schema = source_schema
        self.target_schema = target_schema
        self.source_data_source: DataSource = source_data_source
        self.target_data_source: DataSource = target_data_source

        self.schema_column_deletions = []
        self.schema_column_additions = []
        self.schema_column_type_changes = {}
        self.schema_column_index_changes = {}
        self.type_mappings: list[TypeMapping] | None = type_mappings

        self.__compute_schema_changes()

    def __compute_schema_changes(self):
        data_sources_identical = type(self.source_data_source) is type(self.target_data_source)

        source_column_types = {}
        for column in self.source_schema:
            data = {
                "original_name": column["name"],
                "type": column["type"],
            }

            if not data_sources_identical:
                data["type"] = self.source_data_source.get_data_type_by_db_type(column["type"]) or column["type"]
            source_column_types[column["name"].lower()] = data

        target_column_types = {}
        for column in self.target_schema:
            data = {
                "original_name": column["name"],
                "type": column["type"],
            }

            if not data_sources_identical:
                data["type"] = self.target_data_source.get_data_type_by_db_type(column["type"]) or column["type"]
            target_column_types[column["name"].lower()] = data

        for source_name_lower, source_column_data in source_column_types.items():
            if source_name_lower not in target_column_types:
                self.schema_column_deletions.append(source_column_data["original_name"])
            else:
                source_type = source_column_data["type"]
                target_type = target_column_types[source_name_lower]["type"]

                if self.type_mappings:
                    for type_mapping in self.type_mappings:
                        if source_type == type_mapping.source_type and target_type == type_mapping.target_type:
                            target_type = type_mapping.source_type

                if source_type != target_type:
                    self.schema_column_type_changes[source_column_data["original_name"]] = {
                        "previous_type": source_type,
                        "new_type": target_column_types[source_name_lower]["type"],
                    }

        for target_name_lower, target_column_data in target_column_types.items():
            if target_name_lower not in source_column_types:
                self.schema_column_additions.append(target_column_data["original_name"])
