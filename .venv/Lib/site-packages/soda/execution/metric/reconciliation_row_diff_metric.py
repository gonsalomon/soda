from __future__ import annotations

from soda.execution.data_source_scan import DataSourceScan
from soda.execution.metric.query_metric import QueryMetric
from soda.execution.partition import Partition
from soda.execution.query.reconciliation_row_diff_query import (
    ReconciliationRowDiffQuery,
)


class ReconciliationRowDiffMetric(QueryMetric):
    def __init__(
        self,
        data_source_scan: DataSourceScan,
        check: ReconciliationRowDiffCheck,
        partition: Partition,
        filter: filter,
        columns: list[str],
    ):
        super().__init__(
            data_source_scan=data_source_scan,
            partition=partition,
            column=None,
            name="reconciliation_row_diff",
            check=check,
            identity_parts=[],
        )
        self.filter = filter
        self.check = check
        self.columns = [c for c in columns if c]
        self.query = f"SELECT {','.join(self.columns)} FROM {partition.table.qualified_table_name}"

        if filter:
            self.query += f" WHERE {filter}"

        self.result_columns = []
        self.value = None

    def __str__(self):
        return f'"{self.name}"'

    def ensure_query(self):
        reference_query = ReconciliationRowDiffQuery(
            data_source_scan=self.data_source_scan,
            partition=self.partition,
            metric=self,
        )
        self.data_source_scan.queries.append(reference_query)
        self.queries.append(reference_query)

    def get_cloud_dict(self):
        d = super().get_cloud_dict()
        d["value"] = len(self.value) if self.value is not None else None

        return d

    def get_dict(self):
        d = super().get_cloud_dict()
        d["value"] = len(self.value) if self.value is not None else None

        return d
