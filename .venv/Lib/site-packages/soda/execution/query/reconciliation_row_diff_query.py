from soda.execution.query.query import Query


# May be generalise this to be a query returning rows
class ReconciliationRowDiffQuery(Query):
    def __init__(
        self, data_source_scan: "DataSourceScan", metric: "ReconciliationRowDiffMetric", partition: "Partition"
    ):
        super().__init__(
            data_source_scan=data_source_scan,
            unqualified_query_name=f"reconciliation_row_diff",
            sql=metric.query,
            partition=partition,
        )
        self.metric = metric

    def execute(self):
        self.fetchall()
        results = []
        if self.rows:
            self.metric.result_columns = [column[0] for column in self.description]
            column_indexes = range(len(self.description))
            for row in self.rows:
                results.append(dict(zip(column_indexes, row)))
        self.metric.set_value(results)
