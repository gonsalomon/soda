import traceback

from segment import analytics

from soda.generator.adaptors.adaptor_factory import AdaptorFactory
from soda.generator.exceptions import BaseCLIException
from soda.generator.flow import SuggestionFlow
from soda.generator.utils import print_error_panel


class Orchestrator:
    def __init__(self, configuration_f_path: str, data_source_name: str, output_dir: str, dataset_name: str):
        self.configuration_f_path = configuration_f_path
        self.data_source_name = data_source_name
        self.output_dir = output_dir
        self.dataset_name = dataset_name
        self.event_tracker = None

    def run(self):
        try:
            self._orchestrate()
        except BaseCLIException as e:
            if self.event_tracker:
                self.event_tracker.send_tracking_event(
                    event_name="cli_exception",
                    step_name=e.type,
                    event_json={"message": e.message},
                )
            print_error_panel(e.message)
        except KeyboardInterrupt:
            if self.event_tracker:
                self.event_tracker.send_tracking_event(
                    event_name="intentional_keyboard_interrupt",
                    step_name="keyboard_interrupt",
                    user_choice=True,
                )
                analytics.flush()
            print_error_panel("User interrupted the flow")
        except Exception:
            if self.event_tracker:
                self.event_tracker.send_tracking_event(
                    event_name="cli_exception",
                    step_name="unclassified_exception",
                    event_json={"message": traceback.format_exc()},
                )
            print_error_panel(traceback.format_exc())

    def _orchestrate(self) -> None:
        adaptor_factory = AdaptorFactory(
            data_source_name=self.data_source_name, configuration_f_path=self.configuration_f_path
        )
        adaptor = adaptor_factory.get_adaptor()
        self.event_tracker = adaptor_factory.event_tracker
        suggestion_flow = SuggestionFlow(
            event_tracker=self.event_tracker,
            adaptor=adaptor,
            sodacl_dir=self.output_dir,
            dataset_name=self.dataset_name,
        )
        suggestion_flow.create_flow()
        if suggestion_flow.flow:
            suggestion_flow.run_flow()
            if suggestion_flow.has_sodacl:
                suggestion_flow.write_flow_to_sodacl()
                suggestion_flow.show_instuctions()
            self.event_tracker.send_tracking_event(
                event_name="flow_completed", step_name="post_suggestions", user_choice=True
            )
            analytics.flush()
