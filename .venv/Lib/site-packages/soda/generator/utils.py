from __future__ import annotations

import json
import os
from functools import lru_cache
from pathlib import Path
from typing import Any

import jinja2
import questionary as q
from rich.console import Console
from rich.panel import Panel
from ruamel.yaml import YAML

from soda.generator.global_vars import (
    ANSWER_COLOR,
    AUTOCOMPLETE_BACKGROUND_COLOR,
    CONFIG_PATH,
    PREVIOUS_STEP_MESSAGE,
    SODA_PRIMARY_GREEN,
)
from soda.generator.models.config_models import CheckSuggestionConfigs


@lru_cache(maxsize=1)
def get_console():
    if os.environ.get("SODA_NO_COLOR"):
        return Console(no_color=True)
    return Console()


@lru_cache(maxsize=1)
def get_custom_q_style() -> q.Style:
    if os.environ.get("SODA_NO_COLOR"):
        return q.Style(
            [
                ("answer", "grey italic"),
                ("doc_url", "underline italic"),
                ("skip_question", "bold"),
            ]
        )
    return q.Style(
        [
            ("answer", f"fg:{ANSWER_COLOR} italic"),
            ("skip_question", "fg: red bold"),
            ("doc_url", "underline italic"),
            ("check_name", SODA_PRIMARY_GREEN),
            ("completion-menu.completion", f"bg:{AUTOCOMPLETE_BACKGROUND_COLOR} #a59f85"),
        ]
    )


def read_json(path: str | Path) -> dict[Any, Any]:
    with open(path) as f:
        json_content: dict[Any, Any] = json.load(f)
        return json_content


def write_json(path: str | Path, content: dict):
    with open(path, "w") as f:
        json.dump(content, f, indent=4)


@lru_cache(maxsize=1)
def get_raw_flow_configurations() -> dict[str, Any]:
    with open(os.path.join(CONFIG_PATH, "suggestion_flow.yaml")) as f:
        yaml = YAML(typ="safe")
        flow_config: dict[str, Any] = yaml.load(f)
    return flow_config


def print_header(cs_configs: CheckSuggestionConfigs, step: int | None = None, total_steps: int | None = None):
    console = get_console()
    header_string = f"[{SODA_PRIMARY_GREEN}]{cs_configs.title}"

    if hasattr(cs_configs, "doc_url") and cs_configs.doc_url is not None:
        header_string = f"{header_string} - {cs_configs.doc_url}"

    if step is not None and total_steps is not None:
        header_string = f"{header_string} [{step}/{total_steps}]"
    console.print("\n")
    console.rule(header_string)


def parse_sodacl_jinja_template(file_name: str, **kwargs) -> str:
    sodacl_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "sodacl_templates")
    with open(os.path.join(sodacl_dir, file_name)) as f:
        jinja_template = f.read()
    parsed_template: str = jinja2.Template(jinja_template).render(**kwargs)
    return parsed_template


def print_warning_panel(message: str):
    console = get_console()
    console.print(
        Panel(
            message,
            title="Warning",
            title_align="left",
            border_style="yellow",
        )
    )


def get_previous_step_key_binding():
    return {"b": lambda event: event.app.exit(result=PREVIOUS_STEP_MESSAGE)}


def print_error_panel(message: str):
    console = get_console()
    console.print(
        Panel(
            message,
            title="Error",
            title_align="left",
            border_style="red",
        )
    )


def print_info_panel(message: str):
    console = get_console()
    console.print(
        Panel(
            message,
            title="Info",
            title_align="left",
            border_style="green",
        )
    )
