from __future__ import annotations

from typing import Any

import pandas as pd

from soda.generator.adaptors.postgres_adaptor import PostgresAdaptor
from soda.scan import Scan


class BigqueryAdaptor(PostgresAdaptor):
    def __init__(self, connection: Any, scan: Scan, data_source_name: str, configuration_f_path: str):
        super().__init__(connection, scan, data_source_name, configuration_f_path)

    @staticmethod
    def convert_raw_list_to_pandas(raw_data: list[Any], column_names: list[str]) -> pd.DataFrame:
        parsed_rows = [[row.get(column_name) for column_name in column_names] for row in raw_data]
        df = pd.DataFrame(data=parsed_rows, columns=column_names)
        return df

    @staticmethod
    def get_filter_sql(partition_column: str, n_days_to_partition_by: int) -> str:
        return (
            f"CAST({partition_column} AS TIMESTAMP) > "
            + "DATETIME_ADD(TIMESTAMP '${NOW}', INTERVAL "
            + f"-{n_days_to_partition_by} DAY)"
        )
