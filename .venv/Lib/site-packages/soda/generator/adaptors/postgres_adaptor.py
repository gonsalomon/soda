from __future__ import annotations

from typing import Any

import pandas as pd

from soda.generator.adaptors.base_adaptor import BaseAdaptor
from soda.scan import Scan


class PostgresAdaptor(BaseAdaptor):
    def __init__(self, connection: Any, scan: Scan, data_source_name: str, configuration_f_path: str):
        super().__init__(connection, scan, data_source_name, configuration_f_path)

    def get_sample_pd_dataframe(self, dataset_name: str, column_names: list[str], sample_size: int) -> pd.DataFrame:
        cursor = self.connection.cursor()
        try:
            sql = f"select {','.join(column_names)} from {dataset_name} limit {sample_size}"
            cursor.execute(sql)
            raw_rows: list[tuple] = cursor.fetchall()
            df = self.convert_raw_list_to_pandas(raw_data=raw_rows, column_names=column_names)
        finally:
            cursor.close()
        return df

    @staticmethod
    def convert_raw_list_to_pandas(raw_data: list[Any], column_names: list[str]) -> pd.DataFrame:
        df = pd.DataFrame(data=raw_data, columns=column_names)
        return df

    @staticmethod
    def get_filter_sql(partition_column: str, n_days_to_partition_by: int) -> str:
        return f"{partition_column} > TIMESTAMP" + "'${NOW}'" + f" - interval '{n_days_to_partition_by}d'"
