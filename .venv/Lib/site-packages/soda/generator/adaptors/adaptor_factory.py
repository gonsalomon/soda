from __future__ import annotations

import uuid
from typing import Any

from soda.common.exceptions import DataSourceError
from soda.core.api.data_source_utils import DataSourceUtils
from soda.generator.adaptors.base_adaptor import BaseAdaptor
from soda.generator.adaptors.bigquery_adaptor import BigqueryAdaptor
from soda.generator.adaptors.postgres_adaptor import PostgresAdaptor
from soda.generator.adaptors.snowflake_adaptor import SnowflakeAdaptor
from soda.generator.exceptions import (
    InvalidConfigurationException,
    MissingLibraryException,
)
from soda.generator.tracking.segment import EventTracker
from soda.generator.utils import get_console, print_warning_panel
from soda.scan import Scan


class AdaptorFactory:
    def __init__(self, data_source_name: str, configuration_f_path: str) -> None:
        self.adaptor_dict = {
            "postgres": PostgresAdaptor,
            "snowflake": SnowflakeAdaptor,
            "bigquery": BigqueryAdaptor,
        }
        self.data_source_name = data_source_name
        self.configuration_f_path = configuration_f_path
        self.soda_core_ds_utils = DataSourceUtils(self.configuration_f_path)
        self.scan = self.__get_soda_scan()
        self.console = get_console()
        self.adaptor_name = self.scan._data_source_manager.data_source_properties_by_name[self.data_source_name]["type"]
        self.event_tracker = self.get_event_tracker()

    def get_event_tracker(self) -> EventTracker:
        soda_api_key_id = self.scan._configuration.soda_cloud.api_key_id
        event_tracker = EventTracker(
            soda_api_key_id=soda_api_key_id,
            invocation_id=str(uuid.uuid4()),
            adaptor_type=self.adaptor_name,
        )
        return event_tracker

    def get_adaptor(self) -> BaseAdaptor:
        connection = self.__get_connection()
        if self.scan._configuration.soda_cloud is None:
            raise InvalidConfigurationException(
                "Soda Cloud configuration is missing. Please add it to your configuration file."
            )

        if self.adaptor_name in self.adaptor_dict.keys():
            self.event_tracker.send_tracking_event(
                event_name="data_source",
                step_name="supported_data_source",
                user_choice=True,
                event_json={
                    "data_source_name": self.adaptor_name,
                },
            )
        else:
            # By default, we use postgres adaptor
            print_warning_panel(
                f"Adaptor for '{self.adaptor_name}' is not supported.  Using default "
                "postgres adaptor instead. It might be that some queries might not work."
            )
            self.event_tracker.send_tracking_event(
                event_name="data_source",
                step_name="unsupported_data_source",
                user_choice=True,
                event_json={
                    "data_source_name": self.adaptor_name,
                },
            )

        adaptor_cls = self.adaptor_dict[self.adaptor_name]
        adaptor: BaseAdaptor = adaptor_cls(
            connection=connection,
            scan=self.scan,
            data_source_name=self.data_source_name,
            configuration_f_path=self.configuration_f_path,
        )
        return adaptor

    def __get_connection(self) -> Any:
        try:
            connection = self.soda_core_ds_utils.get_connection(self.data_source_name)
            self.console.print(f":white_check_mark: Connected to '{self.data_source_name}' successfully!")
        except DataSourceError as e:
            raise MissingLibraryException(str(e))
        except Exception:
            raise InvalidConfigurationException(self.soda_core_ds_utils._scan.get_error_logs_text())
        return connection

    def __get_soda_scan(self) -> Scan:
        scan = self.soda_core_ds_utils._scan
        scan.set_data_source_name(self.data_source_name)
        scan.set_scan_definition_name("check suggestions")
        return scan
