from __future__ import annotations

from abc import ABC, abstractmethod
from typing import Any

import pandas as pd

from soda.generator.utils import get_console
from soda.scan import Scan


class BaseAdaptor(ABC):
    def __init__(self, connection: Any, scan: Scan, data_source_name: str, configuration_f_path: str) -> None:
        self.connection = connection
        self.scan = scan
        self.data_source_name = data_source_name
        self.configuration_f_path = configuration_f_path
        self.console = get_console()
        self.core_data_source = self.scan._data_source_manager.data_sources[self.data_source_name]
        self.text_dtypes = self.core_data_source.TEXT_TYPES_FOR_PROFILING
        self.default_formats = self.core_data_source.DEFAULT_FORMATS

    @abstractmethod
    def get_sample_pd_dataframe(self, dataset_name: str, column_names: list[str], sample_size: int) -> pd.DataFrame:
        ...

    @abstractmethod
    def convert_raw_list_to_pandas(self, raw_data: list[tuple], column_names: list[str]) -> pd.DataFrame:
        ...

    @staticmethod
    @abstractmethod
    def get_filter_sql(partition_column: str, n_days_to_partition_by: int) -> str:
        ...
