from __future__ import annotations

from typing import Dict, List

from pydantic import BaseModel


class Column(BaseModel):
    name: str
    data_type: str


class Dataset(BaseModel):
    name: str
    columns: List[Column]


class DatasetsMetadata(BaseModel):
    datasets: Dict[str, Dataset]


class CheckSuggestionConfigs(BaseModel):
    title: str
    instruction: str


class DatasetMetadataConfigs(CheckSuggestionConfigs):
    ...


class DatasetNameConfigs(CheckSuggestionConfigs):
    ...


class SodaCLRunnerConfigs(CheckSuggestionConfigs):
    na_message: str


class SuggestionFilterConfigs(CheckSuggestionConfigs):
    answers: List[Dict[str, str]]
    na_message: str


class SchemaCheckConfigs(CheckSuggestionConfigs):
    doc_url: str
    answers: List[str]
    summary: str


class RowCountCheckConfigs(CheckSuggestionConfigs):
    doc_url: str
    instruction_2: str


class RowCountAnomalyDetectionCheckConfigs(CheckSuggestionConfigs):
    doc_url: str
    summary: str


class PartitionConfigs(CheckSuggestionConfigs):
    doc_url: str
    instruction_2: str
    skip_message: str
    na_message: str
    summary: str


class FreshnessCheckConfigs(CheckSuggestionConfigs):
    doc_url: str
    skip_message: str
    na_message: str
    summary: str


class ColumnFilterConfigs(CheckSuggestionConfigs):
    panel_info_message: str
    column_filter_threshold: int
    output_info_message: str
    na_message: str


class MissingValueCheckConfigs(CheckSuggestionConfigs):
    doc_url: str
    summary: str
    na_message: str


class DuplicateValueCheckConfigs(CheckSuggestionConfigs):
    doc_url: str
    summary: str
    na_message: str


class ValidityCheckConfigs(CheckSuggestionConfigs):
    doc_url: str
    answer_template: str
    summary: str
    na_message: str


class SummaryConfigs(CheckSuggestionConfigs):
    ...


class InstructionConfigs(CheckSuggestionConfigs):
    na_message: str
