from __future__ import annotations

from abc import abstractmethod
from typing import Any

from soda.generator.tracking.segment import EventTracker
from soda.generator.utils import (
    get_custom_q_style,
    get_raw_flow_configurations,
    print_header,
)


class BaseSuggestion:
    def __init__(self, event_tracker: EventTracker, dataset_name: str) -> None:
        self.event_tracker = event_tracker
        self.config = self.set_config()
        self.dataset_name = dataset_name
        self.custom_q_style = get_custom_q_style()
        self.soda_cl = ""
        self.filtered_columns = None
        self.step: int | None = None
        self.total_steps: int | None = None
        # TODO: add a check counter to count how many checks are created

    @property
    @abstractmethod
    def suggestion_name(self) -> str:
        raise NotImplementedError

    @property
    @abstractmethod
    def default_event_name(self) -> str:
        raise NotImplementedError

    def get_config_dict(self, section: str) -> dict[str, Any]:
        raw_flow_configurations = get_raw_flow_configurations()
        config_dict: dict[str, Any] = raw_flow_configurations[section]
        return config_dict

    def print_header(self) -> None:
        print_header(cs_configs=self.config, step=self.step, total_steps=self.total_steps)

    def track_suggestion(
        self,
        user_choice: bool,
        event_name: str | None = None,
        event_json: dict = {},
        n_accepted_checks: int = 0,
    ):
        if event_name is None:
            event_name = self.default_event_name

        event_json["n_accepted_checks"] = n_accepted_checks

        self.event_tracker.send_tracking_event(
            event_name=event_name,
            step_name=self.suggestion_name,
            user_choice=user_choice,
            event_json=event_json,
        )

    @abstractmethod
    def set_config(self):
        ...

    @abstractmethod
    def ask(self):
        ...

    def set_step(self, step: int):
        self.step = step

    def set_total_steps(self, total_steps: int):
        self.total_steps = total_steps

    def get_soda_cl(self) -> str:
        return self.soda_cl

    def set_soda_cl(self, soda_cl: str):
        soda_cl_tmp = ""
        if not soda_cl:
            return

        if hasattr(self.config, "title") and self.config.title:
            soda_cl_tmp += f"\n  # {self.config.title}"

        if hasattr(self.config, "doc_url") and self.config.doc_url:
            soda_cl_tmp += f" - {self.config.doc_url}"

        soda_cl_tmp += f"\n{soda_cl}\n"
        self.soda_cl = soda_cl_tmp
