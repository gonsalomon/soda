from __future__ import annotations

import questionary as q

from soda.generator.global_vars import (
    PREVIOUS_STEP_MESSAGE,
    QUESTIONARY_SELECT_INSTRUCTION_WITH_GO_BACK,
    SKIPPED_STEP_MESSAGE,
)
from soda.generator.models.config_models import FreshnessCheckConfigs
from soda.generator.steps.base_suggestion import BaseSuggestion
from soda.generator.tracking.segment import EventTracker
from soda.generator.utils import (
    get_previous_step_key_binding,
    parse_sodacl_jinja_template,
    print_warning_panel,
)


class FreshnessCheckSuggestion(BaseSuggestion):
    def __init__(
        self, event_tracker: EventTracker, dataset_name: str, freshness_suggestion: list[tuple[str, str]]
    ) -> None:
        super().__init__(event_tracker=event_tracker, dataset_name=dataset_name)
        self.freshness_suggestion = freshness_suggestion

    @property
    def suggestion_name(self) -> str:
        return "freshness"

    @property
    def default_event_name(self) -> str:
        return "add_freshness_check"

    def set_config(self):
        config_dict = self.get_config_dict(section="freshness_check")
        config = FreshnessCheckConfigs(**config_dict)
        return config

    def ask(self):
        self.print_header()
        soda_cl_candidates: list[str | q.Choice] = []  # type: ignore
        for column_name, threshold in self.freshness_suggestion:
            soda_cl = parse_sodacl_jinja_template("freshness_check.yaml", column_name=column_name, threshold=threshold)
            soda_cl_candidates.append(soda_cl)
        if not soda_cl_candidates:
            # It means that there is no candidate column to check freshness
            print_warning_panel(self.config.na_message.format(dataset_name=self.dataset_name))
            return SKIPPED_STEP_MESSAGE
        soda_cl_candidates.insert(0, q.Choice(title=[("class:skip_question", self.config.skip_message)]))
        freshness_check_sodacl = self._get_freshness_suggestion_decision(soda_cl_candidates=soda_cl_candidates)
        if freshness_check_sodacl == PREVIOUS_STEP_MESSAGE:
            self.track_suggestion(event_name=PREVIOUS_STEP_MESSAGE, user_choice=False)
            return freshness_check_sodacl
        if freshness_check_sodacl != self.config.skip_message:
            self.set_soda_cl(soda_cl=f"  - {freshness_check_sodacl}")
            chosen_column_index = soda_cl_candidates.index(freshness_check_sodacl)
            is_selected_top_column = True if chosen_column_index == 1 else False
            self.track_suggestion(
                user_choice=True,
                event_json={
                    "selected_top_column": is_selected_top_column,
                    "column_choice_index": chosen_column_index,
                    "sodacl": freshness_check_sodacl,
                },
                n_accepted_checks=1,
            )
        else:
            self.track_suggestion(user_choice=False)

    def _get_freshness_suggestion_decision(self, soda_cl_candidates: list[str | q.Choice]) -> str:
        instruction = self.config.instruction.format(dataset_name=self.dataset_name)
        freshness_check_sodacl: str = q.select(
            message=instruction,
            choices=soda_cl_candidates,
            style=self.custom_q_style,
            instruction=QUESTIONARY_SELECT_INSTRUCTION_WITH_GO_BACK,
            custom_key_binding=get_previous_step_key_binding(),
        ).unsafe_ask()
        return freshness_check_sodacl
