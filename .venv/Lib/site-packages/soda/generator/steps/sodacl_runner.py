from __future__ import annotations

import re

import questionary as q
from rich.panel import Panel
from rich.table import Table

from soda.generator.global_vars import (
    PREVIOUS_STEP_MESSAGE,
    QUESTIONARY_CONFIRM_INSTRUCTION_WITH_GO_BACK,
    SKIPPED_STEP_MESSAGE,
)
from soda.generator.models.config_models import SodaCLRunnerConfigs
from soda.generator.steps.base_suggestion import BaseSuggestion
from soda.generator.tracking.segment import EventTracker
from soda.generator.utils import (
    SODA_PRIMARY_GREEN,
    get_console,
    get_previous_step_key_binding,
    print_warning_panel,
)
from soda.scan import CheckOutcome, Scan


class SodaCLRunner(BaseSuggestion):
    def __init__(self, event_tracker: EventTracker, dataset_name: str, scan: Scan) -> None:
        super().__init__(event_tracker=event_tracker, dataset_name=dataset_name)
        self.scan = scan
        self.file_name: str | None = None
        self.console = get_console()

    @property
    def suggestion_name(self) -> str:
        return "sodacl_runner"

    @property
    def default_event_name(self) -> str:
        return "run_soda_core"

    def set_config(self):
        config_dict = self.get_config_dict(section="sodacl_runner")
        config = SodaCLRunnerConfigs(**config_dict)
        return config

    def ask(self):
        self.print_header()
        if self.soda_cl is None:
            print_warning_panel(self.config.na_message.format(dataset_name=self.dataset_name))
            return SKIPPED_STEP_MESSAGE
        self._show_soda_cl()
        is_run_soda_core = self._get_run_soda_cl_decision()

        if is_run_soda_core == PREVIOUS_STEP_MESSAGE:
            self.track_suggestion(event_name=PREVIOUS_STEP_MESSAGE, user_choice=False)
            return is_run_soda_core

        if not is_run_soda_core:
            self.track_suggestion(user_choice=False)
            return

        with self.console.status("Running Soda Scan...", spinner="moon"):
            self.scan.add_sodacl_yaml_str(self.soda_cl)
            self.scan.execute()
        self._create_checks_summary_table()
        self._track_generated_check_ids()

    def set_file_name(self, file_name: str):
        self.file_name = file_name

    def set_soda_cl(self, soda_cl: str):
        self.soda_cl = soda_cl

    def _track_generated_check_ids(self):
        check_ids = []
        for check in self.scan._checks:
            identity = check.cloud_dict.get("identity")
            identities = check.cloud_dict.get("identities")
            check_ids.append({"identity": identity, "identities": identities})
        self.event_tracker.send_tracking_event(
            event_name="add_check",
            step_name=self.suggestion_name,
            user_choice=True,
            event_json={"check_ids": check_ids},
        )

    def _get_run_soda_cl_decision(self) -> bool | str:
        is_run_soda_core: bool | str = q.confirm(
            self.config.instruction.format(file_name=self.file_name),
            style=self.custom_q_style,
            custom_key_binding=get_previous_step_key_binding(),
            instruction=QUESTIONARY_CONFIRM_INSTRUCTION_WITH_GO_BACK,
        ).unsafe_ask()
        return is_run_soda_core

    def _create_checks_summary_table(self):
        passing_checks_panel = self._get_checks_text_panel(
            outcome=CheckOutcome.PASS, border_style="green", title="Passing Checks"
        )
        skipping_checks_panel = self._get_checks_text_panel(outcome=None, border_style="blue", title="Skipped Checks")
        warning_checks_panel = self._get_checks_text_panel(
            outcome=CheckOutcome.WARN, border_style="yellow", title="Warning Checks"
        )
        failing_checks_panel = self._get_checks_text_panel(
            outcome=CheckOutcome.FAIL, border_style="red", title="Failing Checks"
        )

        checks_table = Table(
            show_edge=False,
            show_lines=False,
            show_header=False,
        )
        checks_table.add_column("Checks", justify="left")
        checks_table.add_row(passing_checks_panel)
        checks_table.add_row(skipping_checks_panel)
        checks_table.add_row(warning_checks_panel)
        checks_table.add_row(failing_checks_panel)
        self.console.print(
            Panel(
                checks_table,
                title="Checks Summary",
                title_align="left",
                border_style=SODA_PRIMARY_GREEN,
            )
        )

    def _show_soda_cl(self):
        self.console.print(
            Panel(
                self.soda_cl,
                title=f"Generated SodaCL Summary - {self.file_name}",
                title_align="left",
                border_style=SODA_PRIMARY_GREEN,
            )
        )

    def _get_checks_text_panel(self, outcome: str, title: str, border_style: str) -> Panel | None:
        check_texts = ""
        for check in self.scan._checks:
            if check.outcome == outcome:
                check_texts += "\n" + str(check)
                if check.outcome_reasons:
                    for outcome_reason in check.outcome_reasons:
                        check_texts += " " + str(outcome_reason.get("message", ""))

        check_texts = check_texts.replace("[", r"\[")
        check_headers = re.findall(r"\\\[.*\] ", check_texts)
        for check_header in check_headers:
            check_texts = check_texts.replace(
                check_header, f"[{SODA_PRIMARY_GREEN}]{check_header}[/{SODA_PRIMARY_GREEN}]"
            )
        check_texts = (
            check_texts.replace("FAIL", "[red]FAIL[/red]")
            .replace("WARN", "[yellow]WARN[/yellow]")
            .replace("PASS", "[green]PASS[/green]")
            .replace("PASS", "[green]PASS[/green]")
        )
        if check_texts:
            return Panel(
                check_texts,
                title=title,
                title_align="left",
                border_style=border_style,
            )
        return None
