from __future__ import annotations

import uuid

from soda.cloud.dbt_config import DbtCloudConfig
from soda.cloud.soda_cloud import SodaCloud
from soda.common.file_system import file_system
from soda.execution.telemetry import Telemetry
from soda.sampler.sampler import Sampler
from soda.sampler.soda_cloud_sampler import SodaCloudSampler
from soda.scan import Scan
from soda.tracking.segment import EventTracker


class Configuration:
    def __init__(self, scan: Scan):
        self.scan = scan
        self.data_source_properties_by_name: dict[str, dict] = {}
        self.telemetry: Telemetry | None = Telemetry()
        self.soda_cloud: SodaCloud | None = None
        self.file_system = file_system()
        self.sampler: Sampler = SodaCloudSampler()
        self.dbt_cloud: DbtCloudConfig | None = None
        self.exclude_columns: dict[str, list] = {}
        self.samples_limit: int | None = None
        self.event_tracker: EventTracker | None = None

    def setup_event_tracker(self):
        requirements = {
            "soda_cloud": self.soda_cloud,
        }
        if self.soda_cloud:
            requirements.update(
                {
                    "api_key_id": self.soda_cloud.api_key_id,
                    "host": self.soda_cloud.host,
                    "organization_info": self.soda_cloud.organization_info,
                    "user": self.soda_cloud.user,
                }
            )

        if all(requirements.values()):
            adaptor_type = None
            if self.scan._data_source_name in self.data_source_properties_by_name:
                adaptor_type = self.data_source_properties_by_name[self.scan._data_source_name].get("type")

            self.event_tracker = EventTracker(
                soda_api_key_id=self.soda_cloud.api_key_id,
                invocation_id=str(uuid.uuid4()),
                adaptor_type=adaptor_type
                if self.scan._data_source_name in self.data_source_properties_by_name
                else None,
                organization=self.soda_cloud.organization_info,
                user=self.soda_cloud.user,
                cloud_environment=self.soda_cloud.host,
            )
        else:
            self.scan._logs.info(
                f"Unable to set up event tracker. Missing requirements: {[k for k,v in requirements.items() if not v]}"
            )

    def add_spark_session(self, data_source_name: str, spark_session):
        self.data_source_properties_by_name[data_source_name] = {
            "type": "spark_df",
            "connection": "spark_df_data_source",
            "spark_session": spark_session,
        }

    def add_dask_context(self, data_source_name: str, dask_context):
        self.data_source_properties_by_name[data_source_name] = {
            "type": "dask",
            "connection": "dask_data_source",
            "context": dask_context,
        }

    def add_duckdb_connection(self, data_source_name: str, duckdb_connection):
        self.data_source_properties_by_name[data_source_name] = {
            "type": "duckdb",
            "connection": "duckdb_connection_data_source",
            "duckdb_connection": duckdb_connection,
        }
